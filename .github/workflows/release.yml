name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --clean --windowed \
            --name ExcelTranslate \
            --hidden-import excel_translate \
            main.py
      - name: Upload artifact (raw)
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-${{ runner.os }}
          path: |
            dist/ExcelTranslate/**
      - name: macOS codesign (optional)
        if: runner.os == 'macOS' && secrets.APPLE_ID != '' && secrets.APPLE_TEAM_ID != '' && secrets.APPLE_APP_SPECIFIC_PASSWORD != '' && secrets.APPLE_SIGN_IDENTITY != ''
        run: |
          echo "Signing app bundle"
          codesign --deep --force --options runtime \
            --sign "$APPLE_SIGN_IDENTITY" \
            dist/ExcelTranslate.app || true
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_SIGN_IDENTITY: ${{ secrets.APPLE_SIGN_IDENTITY }}
      - name: Create DMG (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          create-dmg --overwrite --volname "ExcelTranslate" \
            --window-size 500 300 --app-drop-link 400 150 \
            ExcelTranslate.dmg dist/ExcelTranslate.app
      - name: Notarize DMG (optional)
        if: runner.os == 'macOS' && secrets.APPLE_ID != '' && secrets.APPLE_TEAM_ID != '' && secrets.APPLE_APP_SPECIFIC_PASSWORD != ''
        run: |
          xcrun notarytool submit ExcelTranslate.dmg \
            --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" --wait || true
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      - name: Upload macOS DMG
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-macOS-DMG
          path: ExcelTranslate.dmg
      - name: Package Linux (.deb/.rpm via fpm)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev rpm
          sudo gem install --no-document fpm
          VERSION=${GITHUB_REF_NAME#v}
          APPDIR=dist/ExcelTranslate
          mkdir -p pkg pkgroot/opt/excel-translate pkgroot/usr/share/applications pkgroot/usr/share/icons/hicolor/256x256/apps
          cp -r "$APPDIR"/* pkgroot/opt/excel-translate/
          # Desktop file
          cat > pkgroot/usr/share/applications/exceltranslate.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=ExcelTranslate
          Exec=/opt/excel-translate/ExcelTranslate
          Icon=exceltranslate
          Categories=Utility;
          EOF
          # Icon if available
          if [ -f icons/exceltranslate.png ]; then cp icons/exceltranslate.png pkgroot/usr/share/icons/hicolor/256x256/apps/exceltranslate.png; fi
          # Post-install/remove scripts to manage convenient symlink
          cat > postinstall.sh << 'EOS'
          #!/bin/sh
          ln -sf /opt/excel-translate/ExcelTranslate /usr/bin/excel-translate || true
          update-desktop-database -q || true
          update-icon-caches /usr/share/icons/hicolor || true
          EOS
          chmod +x postinstall.sh
          cat > postremove.sh << 'EOS'
          #!/bin/sh
          rm -f /usr/bin/excel-translate || true
          update-desktop-database -q || true
          update-icon-caches /usr/share/icons/hicolor || true
          EOS
          chmod +x postremove.sh
          fpm -s dir -t deb -n excel-translate -v "$VERSION" \
            --license MIT --maintainer "${GITHUB_ACTOR}@users.noreply.github.com" \
            --description "Excel string translator GUI" \
            -C pkgroot . \
            --after-install postinstall.sh --after-remove postremove.sh \
            -p pkg/excel-translate_${VERSION}_amd64.deb
          fpm -s dir -t rpm -n excel-translate -v "$VERSION" \
            --license MIT --maintainer "${GITHUB_ACTOR}@users.noreply.github.com" \
            --description "Excel string translator GUI" \
            -C pkgroot . \
            --after-install postinstall.sh --after-remove postremove.sh \
            -p pkg/excel-translate-${VERSION}-1.x86_64.rpm
      - name: Upload Linux packages
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-Linux-packages
          path: |
            pkg/*.deb
            pkg/*.rpm
      - name: Build AppImage (Linux)
        if: runner.os == 'Linux'
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          mkdir -p AppDir/usr/bin
          cp dist/ExcelTranslate/ExcelTranslate AppDir/usr/bin/ExcelTranslate
          printf '#!/bin/sh\nexec "$APPDIR/usr/bin/ExcelTranslate" "$@"\n' > AppDir/AppRun
          chmod +x AppDir/AppRun
          printf '[Desktop Entry]\nType=Application\nName=ExcelTranslate\nExec=ExcelTranslate\nIcon=exceltranslate\nCategories=Utility;\n' > AppDir/ExcelTranslate.desktop
          # Optional: copy icon if available at icons/exceltranslate.png
          if [ -f icons/exceltranslate.png ]; then cp icons/exceltranslate.png AppDir/exceltranslate.png; fi
          ./appimagetool AppDir ExcelTranslate-${VERSION}-x86_64.AppImage
      - name: Upload AppImage
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-AppImage
          path: ExcelTranslate-*-x86_64.AppImage

  windows-installer:
    name: Package Windows Installer
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          choco install innosetup -y
          choco install nsis -y
      - name: Build exe (PyInstaller)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean --windowed --name ExcelTranslate main.py
      - name: Build installer (Inno Setup)
        shell: pwsh
        run: |
          "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe" packaging\windows\installer.iss
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-Windows-Installer
          path: packaging\windows\Output\ExcelTranslateSetup.exe
      - name: Build installer (NSIS)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path packaging\windows\Output | Out-Null
          makensis /V2 packaging\windows\installer.nsi
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: ExcelTranslate-Windows-NSIS
          path: packaging\windows\Output\ExcelTranslateSetup-NSIS.exe
      - name: Windows code signing (optional)
        if: secrets.WINDOWS_CERT_PFX_BASE64 != '' && secrets.WINDOWS_CERT_PASSWORD != ''
        shell: pwsh
        run: |
          choco install windows-sdk-10.1 -y
          $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${env:WINDOWS_CERT_PFX_BASE64}"))
          $signtool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe | Select-Object -First 1 -ExpandProperty FullName
          & $signtool sign /f $pfxPath /p "$env:WINDOWS_CERT_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist\ExcelTranslate\ExcelTranslate.exe"
          if (Test-Path "packaging\windows\Output\ExcelTranslateSetup.exe") { & $signtool sign /f $pfxPath /p "$env:WINDOWS_CERT_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "packaging\windows\Output\ExcelTranslateSetup.exe" }
          if (Test-Path "packaging\windows\Output\ExcelTranslateSetup-NSIS.exe") { & $signtool sign /f $pfxPath /p "$env:WINDOWS_CERT_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "packaging\windows\Output\ExcelTranslateSetup-NSIS.exe" }
        env:
          WINDOWS_CERT_PFX_BASE64: ${{ secrets.WINDOWS_CERT_PFX_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

  release:
    name: Create GitHub Release
    needs: [build, windows-installer]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
